function [TaskPeriods, TaskExecTimes, TaskNames, ServerPeriods, ServerBudgets, ServerNames] = TaskGenerator(numberOfServers, NumberOfTaskInServer, minPeriod, maxPeriod, SystemUtilization)

%% Server utilizations
ServerUs = UUniFast(numberOfServers, SystemUtilization);
%% Initialization
TaskUs = zeros(numberOfServers,NumberOfTaskInServer);
TaskPeriods = zeros(numberOfServers,NumberOfTaskInServer);
TaskExecTimes = zeros(numberOfServers,NumberOfTaskInServer);
TaskNames = cell(numberOfServers,NumberOfTaskInServer);
ServerPeriods = zeros(1, numberOfServers);
ServerBudgets = zeros(1, numberOfServers);
ServerNames = cell(1, numberOfServers);
%% Task utilizations
for serverNo=1:numberOfServers
    TaskUs(serverNo,:) = UUniFast(NumberOfTaskInServer, ServerUs(serverNo));
end

%% Task Periods based on Uniform distribution
for serverNo=1:numberOfServers
    for taskNo = 1: length(TaskUs(serverNo,:))
        TaskPeriods(serverNo,taskNo) = unidrnd(maxPeriod);
        TaskExecTimes(serverNo,taskNo) = TaskPeriods(serverNo,taskNo)* TaskUs(serverNo,taskNo);
        TaskNames{serverNo,taskNo} = strcat('S',int2str(serverNo), 'T', int2str(taskNo));
    end
    ServerPeriods(serverNo) = (min(TaskPeriods(serverNo,:))/2);
    ServerBudgets(serverNo) = ServerPeriods(serverNo) * ServerUs(serverNo);
    ServerNames{serverNo} = strcat('Server',int2str(serverNo));
end
if ~Adaptive
    if Dynamic
        %S1T3
        TaskExecTimes(1,3) = TaskExecTimes(1,3) + 
    else
        ServerBudgets = CalculateBudgets(TaskPeriods, TaskExecTimes, TaskNames, ServerPeriods, ServerBudgets, ServerNames);
    end
end

%% Test
U = 0;
for serverNo=1:numberOfServers
    U = U + ServerBudgets(serverNo) / ServerPeriods(serverNo);
end
return
end %function end

